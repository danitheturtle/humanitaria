type Query {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Fetches objects given their IDs"""
  nodes(
    """The IDs of objects"""
    ids: [ID!]!
  ): [Node]!
  notes: [Note]
  note(id: ID): Note
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

type Note implements Node {
  """The ID of an object"""
  id: ID!
  content: String
}

type Mutation {
  createNote(input: createNoteInput!): createNotePayload
  deleteNote(input: deleteNoteInput!): deleteNotePayload
  updateNote(input: updateNoteInput!): updateNotePayload
}

type createNotePayload {
  note: Note
  clientMutationId: String
}

input createNoteInput {
  content: String!
  clientMutationId: String
}

type deleteNotePayload {
  note: Note
  clientMutationId: String
}

input deleteNoteInput {
  id: ID!
  clientMutationId: String
}

type updateNotePayload {
  note: Note
  clientMutationId: String
}

input updateNoteInput {
  id: ID!
  content: String!
  clientMutationId: String
}
