type Query {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Fetches objects given their IDs"""
  nodes(
    """The IDs of objects"""
    ids: [ID!]!
  ): [Node]!
  notes(after: String, first: Int, before: String, last: Int): NoteConnection
  note(input: noteInput): Note
  me: User
  user(input: userInput): User
  searchLocations(after: String, first: Int, search: String): SearchLocationsConnection
  location(input: locationInput): Location
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""A connection to a list of items."""
type NoteConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [NoteEdge]
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

"""An edge in a connection."""
type NoteEdge {
  """The item at the end of the edge"""
  node: Note

  """A cursor for use in pagination"""
  cursor: String!
}

type Note implements Node {
  """The ID of an object"""
  id: ID!
  content: String
  likes: Int
  user: User
}

type User implements Node {
  """The ID of an object"""
  id: ID!
  uid: ID!
  username: String!
  password: String!
  email: String
  picture: String
  name: String
  legal_name: String
  timezone: String
  locale: String
  last_login: String
  email_verified: Boolean
  admin: Boolean
  notes(after: String, first: Int, before: String, last: Int): UserNotesConnection
}

"""A connection to a list of items."""
type UserNotesConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserNotesEdge]
}

"""An edge in a connection."""
type UserNotesEdge {
  """The item at the end of the edge"""
  node: Note

  """A cursor for use in pagination"""
  cursor: String!
}

input noteInput {
  id: ID
}

input userInput {
  id: ID
  username: String
  email: String
  uid: ID
}

"""A connection to a list of items."""
type SearchLocationsConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SearchLocationsEdge]
}

"""An edge in a connection."""
type SearchLocationsEdge {
  """The item at the end of the edge"""
  node: Location

  """A cursor for use in pagination"""
  cursor: String!
}

type Location implements Node {
  """The ID of an object"""
  id: ID!
  placeId: String
  displayName: String
  lat: String
  lon: String
  boundingBox: BoundingBox
  category: String
  subCategory: String
  geotext: String
  address: Address
}

type BoundingBox {
  x1: String
  y1: String
  x2: String
  y2: String
}

type Address {
  label: String
  address: String
  district: String
  city: String
  county: String
  state: String
  zip: String
  country: String
  countryCode: String
}

input locationInput {
  id: ID
}

type Mutation {
  createNote(input: createNoteInput!): createNotePayload
  deleteNote(input: deleteNoteInput!): deleteNotePayload
  updateNote(input: updateNoteInput!): updateNotePayload
  likeNote(input: likeNoteInput!): likeNotePayload
  signIn(input: signInInput!): signInPayload
  signOut(input: signOutInput!): signOutPayload
  createUser(input: createUserInput!): createUserPayload
  deleteUser(input: deleteUserInput!): deleteUserPayload
  updateUser(input: updateUserInput!): updateUserPayload
}

type createNotePayload {
  noteEdge: NoteEdge
  clientMutationId: String
}

input createNoteInput {
  content: String!
  clientMutationId: String
}

type deleteNotePayload {
  note: Note
  clientMutationId: String
}

input deleteNoteInput {
  id: ID!
  clientMutationId: String
}

type updateNotePayload {
  note: Note
  clientMutationId: String
}

input updateNoteInput {
  id: ID!
  content: String!
  clientMutationId: String
}

type likeNotePayload {
  note: Note
  clientMutationId: String
}

input likeNoteInput {
  id: ID!
  clientMutationId: String
}

type signInPayload {
  me: User
  clientMutationId: String
}

input signInInput {
  usernameOrEmail: String
  passwordHash: String
  clientMutationId: String
}

type signOutPayload {
  clientMutationId: String
}

input signOutInput {
  clientMutationId: String
}

type createUserPayload {
  me: User
  clientMutationId: String
}

input createUserInput {
  username: String!
  passwordHash: String!
  email: String
  clientMutationId: String
}

type deleteUserPayload {
  user: User
  clientMutationId: String
}

input deleteUserInput {
  uid: ID
  clientMutationId: String
}

type updateUserPayload {
  me: User
  partialErrors: [Error]
  clientMutationId: String
}

type Error {
  code: Int
  message: String
  forInputWithId: String
}

input updateUserInput {
  uid: ID!
  passwordHash: ID!
  username: String
  email: String
  newPasswordHash: String
  picture: String
  name: String
  legal_name: String
  timezone: String
  locale: String
  clientMutationId: String
}

type Subscription {
  countToNumber(input: countToNumberInput!): countToNumberPayload
  noteUpdated(input: noteUpdatedInput!): noteUpdatedPayload
  noteCreated(input: noteCreatedInput!): noteCreatedPayload
  noteDeleted(input: noteDeletedInput!): noteDeletedPayload
}

type countToNumberPayload {
  number: Int
  clientSubscriptionId: String
}

input countToNumberInput {
  number: Int
  clientSubscriptionId: String
}

type noteUpdatedPayload {
  note: Note
  clientSubscriptionId: String
}

input noteUpdatedInput {
  clientSubscriptionId: String
}

type noteCreatedPayload {
  noteEdge: NoteEdge
  clientSubscriptionId: String
}

input noteCreatedInput {
  clientSubscriptionId: String
}

type noteDeletedPayload {
  note: Note
  clientSubscriptionId: String
}

input noteDeletedInput {
  clientSubscriptionId: String
}
