{"version":3,"file":"main.js","mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;;;AAEA;AACA;AACA;AAEA;AACA;AAQA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;;AACA;AACA;AAAA;AAAA;AACA;;AACA;AAAA;AACA;AAnBA;AAsBA;;AAzBA;;AA4BA;;;;;;;;;;AClCA;AACA;AACA;;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AACA;AACA;AACA;AALA;AAQA;AAvBA;AA0BA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AALA;AAMA;AACA;AAPA;AASA;AACA;AACA;AACA;AACA;AACA;AAAA;;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAjBA;AA0BA;;;AAEA;AAAA;AAAA;AAEA;;;;;;;;;;;;;;;;;;;AC3FA;AACA;AACA;AACA;;;;AAEA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAHA;AADA;AAQA;AAAA;AAEA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAAA;AAcA;AAAA;AAAA;AAfA;AAZA;AAiCA;AAtCA;AAwCA;AAEA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;AANA;AA1CA;AA6DA;;AAEA;;;;;;;;;;AC1EA;AACA;AACA;;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAHA;AADA;AASA;AACA;AAEA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AACA;AACA;AACA;AALA;AAQA;AA7BA;AAgCA;AACA;AACA;AAAA;AADA;AAEA;AACA;AACA;AACA;AAAA;AALA;AAMA;AACA;AAPA;AASA;AACA;AACA;AAAA;AADA;AAEA;AACA;AACA;AAAA;;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAjBA;AA0BA;;;AAEA;AAAA;AAAA;AAEA;;;;;;;;;;AC5GA;AACA;AACA;;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAHA;AADA;AASA;AACA;AAEA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAXA;AAcA;AACA;AACA;AAAA;AADA;AAEA;AACA;AACA;AACA;AAAA;AALA;AAMA;AACA;AAPA;AASA;AACA;AACA;AAAA;AADA;AAEA;AACA;AACA;AAAA;;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAjBA;AA0BA;;;AAEA;AAAA;AAAA;AAEA;;;;;;;;;;ACpFA;AACA;AACA;;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAAA;AAMA;AACA;AACA;AAHA;AALA;AAYA;AACA;AAEA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AACA;AACA;AACA;AALA;AAQA;AAlCA;AAqCA;AACA;AACA;AACA;AADA;AAEA;AAFA;AAIA;AACA;AACA;AACA;AAAA;AARA;AASA;AACA;AAVA;AAYA;AACA;AACA;AACA;AADA;AAEA;AAFA;AAIA;AACA;AACA;AAAA;;AAPA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAvBA;AAgCA;;;AAEA;AAAA;AAAA;AAEA;;;;;;;;;;;;;;;;;;;AC5HA;AACA;AAEA;;AASA;AACA;AACA;AADA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAdA;AAgBA;;AAEA;;;;;;;;;;;;;;;;;;;ACnCA;AACA;AAEA;;AAMA;AACA;AACA;AADA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAdA;AAgBA;;AAEA;;;;;;;;;;;;;;;;;;;AChCA;AACA;AAEA;;AASA;AACA;AACA;AACA;AAFA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAdA;AAgBA;;AAEA;;;;;;;;;;;;;;;;ACpCA;;AAEA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AAFA;AALA;AAUA;AACA;AACA;;AAEA;AACA;AACA;AAFA;AAKA;;;;;;;;;;;;;;;;ACtBA;AACA;AACA;AACA;;AAEA","sources":["webpack://web/./src/App/App.js","webpack://web/./src/App/__generated__/AppQuery.graphql.js","webpack://web/./src/App/containers/MainPage/index.js","webpack://web/./src/App/containers/MainPage/mutations/__generated__/createNoteMutation.graphql.js","webpack://web/./src/App/containers/MainPage/mutations/__generated__/deleteNoteMutation.graphql.js","webpack://web/./src/App/containers/MainPage/mutations/__generated__/updateNoteMutation.graphql.js","webpack://web/./src/App/containers/MainPage/mutations/createNote.js","webpack://web/./src/App/containers/MainPage/mutations/deleteNote.js","webpack://web/./src/App/containers/MainPage/mutations/updateNote.js","webpack://web/./src/environment.js","webpack://web/./src/index.js"],"sourcesContent":["import React from 'react';\nimport { graphql, QueryRenderer } from 'react-relay';\nimport MainPage from './containers/MainPage';\n\nimport environment from '../environment';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <QueryRenderer\n        environment={environment}\n        query={graphql`\n          query AppQuery {\n            notes {\n              _id\n              content\n            }\n          }\n        `}\n        variables={{}}\n        render={({ error, props }) => {\n          if (error) {\n            return <div>Error!</div>;\n          }\n          if (!props) {\n            return <div>Loading...</div>;\n          }\n          return <MainPage {...props} />;\n        }}\n      />\n    );\n  }\n}\n\nexport default App;","/**\n * @flow\n */\n\n/* eslint-disable */\n\n'use strict';\n\n/*::\nimport type { ConcreteRequest } from 'relay-runtime';\nexport type AppQueryVariables = {||};\nexport type AppQueryResponse = {|\n  +notes: ?$ReadOnlyArray<?{|\n    +_id: ?string,\n    +content: ?string,\n  |}>\n|};\nexport type AppQuery = {|\n  variables: AppQueryVariables,\n  response: AppQueryResponse,\n|};\n*/\n\n\n/*\nquery AppQuery {\n  notes {\n    _id\n    content\n  }\n}\n*/\n\nconst node/*: ConcreteRequest*/ = (function(){\nvar v0 = [\n  {\n    \"alias\": null,\n    \"args\": null,\n    \"concreteType\": \"Note\",\n    \"kind\": \"LinkedField\",\n    \"name\": \"notes\",\n    \"plural\": true,\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"_id\",\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"content\",\n        \"storageKey\": null\n      }\n    ],\n    \"storageKey\": null\n  }\n];\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": [],\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"AppQuery\",\n    \"selections\": (v0/*: any*/),\n    \"type\": \"Query\",\n    \"abstractKey\": null\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": [],\n    \"kind\": \"Operation\",\n    \"name\": \"AppQuery\",\n    \"selections\": (v0/*: any*/)\n  },\n  \"params\": {\n    \"cacheID\": \"898fa45cd52fc575a5f8784e94a5a190\",\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"AppQuery\",\n    \"operationKind\": \"query\",\n    \"text\": \"query AppQuery {\\n  notes {\\n    _id\\n    content\\n  }\\n}\\n\"\n  }\n};\n})();\n// prettier-ignore\n(node/*: any*/).hash = 'f49ea50a81661eb7e7cd272cbfb88f4d';\n\nmodule.exports = node;\n","import React, { useState } from 'react';\nimport createNoteMutation from './mutations/createNote';\nimport deleteNoteMutation from './mutations/deleteNote';\nimport updateNoteMutation from './mutations/updateNote';\n\nconst MainPage = ({ notes }) => {\n  const [newNote, setNewNote] = useState('');\n  const [noteContentBeingUpdated, setNoteContentBeingUpdated] = useState('');\n  const [noteIdBeingUpdated, setNoteIdBeingUpdated] = useState('');\n\n  return (\n    <div>\n      <header>Notes</header>\n      <ul>\n        {notes.map(v => {\n          const isBeingUpdated = noteIdBeingUpdated === v._id;\n\n          return (\n            <div key={v._id}>\n              {isBeingUpdated ? (\n                <li>\n                  <input\n                    autoFocus\n                    value={noteContentBeingUpdated}\n                    onChange={e => setNoteContentBeingUpdated(e.target.value)}\n                  />\n                </li>\n              ) : (\n                <li>{v.content}</li>\n              )}\n              <div style={{ display: 'flex' }}>\n                <button\n                  onClick={() => {\n                    if (isBeingUpdated) {\n                      updateNoteMutation(v._id, noteContentBeingUpdated);\n                      setNoteIdBeingUpdated('');\n                      setNoteContentBeingUpdated('');\n                    } else {\n                      setNoteIdBeingUpdated(v._id);\n                      setNoteContentBeingUpdated(v.content);\n                    }\n                  }}\n                >\n                  update\n                </button>\n                <button onClick={() => deleteNoteMutation(v._id)}>\n                  delete\n                </button>\n              </div>\n            </div>\n          );\n        })}\n      </ul>\n      <footer>\n        <input\n          value={newNote}\n          onChange={e => setNewNote(e.target.value)}\n          placeholder='Add a note here'\n        ></input>\n        <button\n          onClick={() => {\n            if (newNote) {\n              createNoteMutation(newNote);\n              setNewNote('');\n            }\n          }}\n        >\n          create note\n        </button>\n      </footer>\n    </div>\n  );\n};\n\nexport default MainPage;","/**\n * @flow\n */\n\n/* eslint-disable */\n\n'use strict';\n\n/*::\nimport type { ConcreteRequest } from 'relay-runtime';\nexport type createNoteMutationVariables = {|\n  content?: ?string\n|};\nexport type createNoteMutationResponse = {|\n  +createNote: ?{|\n    +_id: ?string,\n    +content: ?string,\n  |}\n|};\nexport type createNoteMutation = {|\n  variables: createNoteMutationVariables,\n  response: createNoteMutationResponse,\n|};\n*/\n\n\n/*\nmutation createNoteMutation(\n  $content: String\n) {\n  createNote(content: $content) {\n    _id\n    content\n  }\n}\n*/\n\nconst node/*: ConcreteRequest*/ = (function(){\nvar v0 = [\n  {\n    \"defaultValue\": null,\n    \"kind\": \"LocalArgument\",\n    \"name\": \"content\"\n  }\n],\nv1 = [\n  {\n    \"alias\": null,\n    \"args\": [\n      {\n        \"kind\": \"Variable\",\n        \"name\": \"content\",\n        \"variableName\": \"content\"\n      }\n    ],\n    \"concreteType\": \"Note\",\n    \"kind\": \"LinkedField\",\n    \"name\": \"createNote\",\n    \"plural\": false,\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"_id\",\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"content\",\n        \"storageKey\": null\n      }\n    ],\n    \"storageKey\": null\n  }\n];\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"createNoteMutation\",\n    \"selections\": (v1/*: any*/),\n    \"type\": \"Mutation\",\n    \"abstractKey\": null\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Operation\",\n    \"name\": \"createNoteMutation\",\n    \"selections\": (v1/*: any*/)\n  },\n  \"params\": {\n    \"cacheID\": \"a91c383e999fc12656d5e7ff07695106\",\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"createNoteMutation\",\n    \"operationKind\": \"mutation\",\n    \"text\": \"mutation createNoteMutation(\\n  $content: String\\n) {\\n  createNote(content: $content) {\\n    _id\\n    content\\n  }\\n}\\n\"\n  }\n};\n})();\n// prettier-ignore\n(node/*: any*/).hash = 'adeba3f4c0016f9eb46f2857739341f8';\n\nmodule.exports = node;\n","/**\n * @flow\n */\n\n/* eslint-disable */\n\n'use strict';\n\n/*::\nimport type { ConcreteRequest } from 'relay-runtime';\nexport type deleteNoteMutationVariables = {|\n  _id?: ?string\n|};\nexport type deleteNoteMutationResponse = {|\n  +deleteNote: ?string\n|};\nexport type deleteNoteMutation = {|\n  variables: deleteNoteMutationVariables,\n  response: deleteNoteMutationResponse,\n|};\n*/\n\n\n/*\nmutation deleteNoteMutation(\n  $_id: ID\n) {\n  deleteNote(_id: $_id)\n}\n*/\n\nconst node/*: ConcreteRequest*/ = (function(){\nvar v0 = [\n  {\n    \"defaultValue\": null,\n    \"kind\": \"LocalArgument\",\n    \"name\": \"_id\"\n  }\n],\nv1 = [\n  {\n    \"alias\": null,\n    \"args\": [\n      {\n        \"kind\": \"Variable\",\n        \"name\": \"_id\",\n        \"variableName\": \"_id\"\n      }\n    ],\n    \"kind\": \"ScalarField\",\n    \"name\": \"deleteNote\",\n    \"storageKey\": null\n  }\n];\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"deleteNoteMutation\",\n    \"selections\": (v1/*: any*/),\n    \"type\": \"Mutation\",\n    \"abstractKey\": null\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Operation\",\n    \"name\": \"deleteNoteMutation\",\n    \"selections\": (v1/*: any*/)\n  },\n  \"params\": {\n    \"cacheID\": \"6b0e83d64674b2c64b29dce9f074d780\",\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"deleteNoteMutation\",\n    \"operationKind\": \"mutation\",\n    \"text\": \"mutation deleteNoteMutation(\\n  $_id: ID\\n) {\\n  deleteNote(_id: $_id)\\n}\\n\"\n  }\n};\n})();\n// prettier-ignore\n(node/*: any*/).hash = 'a5371187186204b2942ad2583c87fbc9';\n\nmodule.exports = node;\n","/**\n * @flow\n */\n\n/* eslint-disable */\n\n'use strict';\n\n/*::\nimport type { ConcreteRequest } from 'relay-runtime';\nexport type updateNoteMutationVariables = {|\n  content?: ?string,\n  _id?: ?string,\n|};\nexport type updateNoteMutationResponse = {|\n  +updateNote: ?{|\n    +_id: ?string,\n    +content: ?string,\n  |}\n|};\nexport type updateNoteMutation = {|\n  variables: updateNoteMutationVariables,\n  response: updateNoteMutationResponse,\n|};\n*/\n\n\n/*\nmutation updateNoteMutation(\n  $content: String\n  $_id: ID\n) {\n  updateNote(_id: $_id, content: $content) {\n    _id\n    content\n  }\n}\n*/\n\nconst node/*: ConcreteRequest*/ = (function(){\nvar v0 = {\n  \"defaultValue\": null,\n  \"kind\": \"LocalArgument\",\n  \"name\": \"_id\"\n},\nv1 = {\n  \"defaultValue\": null,\n  \"kind\": \"LocalArgument\",\n  \"name\": \"content\"\n},\nv2 = [\n  {\n    \"alias\": null,\n    \"args\": [\n      {\n        \"kind\": \"Variable\",\n        \"name\": \"_id\",\n        \"variableName\": \"_id\"\n      },\n      {\n        \"kind\": \"Variable\",\n        \"name\": \"content\",\n        \"variableName\": \"content\"\n      }\n    ],\n    \"concreteType\": \"Note\",\n    \"kind\": \"LinkedField\",\n    \"name\": \"updateNote\",\n    \"plural\": false,\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"_id\",\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"content\",\n        \"storageKey\": null\n      }\n    ],\n    \"storageKey\": null\n  }\n];\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": [\n      (v0/*: any*/),\n      (v1/*: any*/)\n    ],\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"updateNoteMutation\",\n    \"selections\": (v2/*: any*/),\n    \"type\": \"Mutation\",\n    \"abstractKey\": null\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": [\n      (v1/*: any*/),\n      (v0/*: any*/)\n    ],\n    \"kind\": \"Operation\",\n    \"name\": \"updateNoteMutation\",\n    \"selections\": (v2/*: any*/)\n  },\n  \"params\": {\n    \"cacheID\": \"4731bd4beeec173d07fbb688f761b2ef\",\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"updateNoteMutation\",\n    \"operationKind\": \"mutation\",\n    \"text\": \"mutation updateNoteMutation(\\n  $content: String\\n  $_id: ID\\n) {\\n  updateNote(_id: $_id, content: $content) {\\n    _id\\n    content\\n  }\\n}\\n\"\n  }\n};\n})();\n// prettier-ignore\n(node/*: any*/).hash = '243024c90f652d36ad9a87f3847c033b';\n\nmodule.exports = node;\n","import { commitMutation, graphql } from 'react-relay';\nimport environment from '../../../../environment';\n\nconst mutation = graphql`\n  mutation createNoteMutation($content: String) {\n    createNote(content: $content) {\n      _id\n      content\n    }\n  }\n`;\n\nfunction createNoteMutation(content) {\n  const variables = {\n    content\n  };\n\n  commitMutation(environment, {\n    mutation,\n    variables,\n    onCompleted: (response, errors) => {\n      console.log('Response received from server.');\n    },\n    updater: store => {\n      const payload = store.getRootField('createNote');\n      const root = store.getRoot();\n      const notes = root.getLinkedRecords('notes');\n\n      const newNotes = [...notes, payload];\n      root.setLinkedRecords(newNotes, 'notes');\n    },\n    onError: err => console.error(err)\n  });\n}\n\nexport default createNoteMutation;","import { commitMutation, graphql } from 'react-relay';\nimport environment from '../../../../environment';\n\nconst mutation = graphql`\n  mutation deleteNoteMutation($_id: ID) {\n    deleteNote(_id: $_id)\n  }\n`;\n\nfunction deleteNoteMutation(_id) {\n  const variables = {\n    _id\n  };\n\n  commitMutation(environment, {\n    mutation,\n    variables,\n    onCompleted: (response, errors) => {\n      console.log('Response received from server.');\n    },\n    updater: store => {\n      const root = store.getRoot();\n      const notes = root.getLinkedRecords('notes');\n      const newNotes = notes.filter(v => v.getValue('_id') !== _id);\n\n      root.setLinkedRecords(newNotes, 'notes');\n    },\n\n    onError: err => console.error(err)\n  });\n}\n\nexport default deleteNoteMutation;","import { commitMutation, graphql } from 'react-relay';\nimport environment from '../../../../environment';\n\nconst mutation = graphql`\n  mutation updateNoteMutation($content: String, $_id: ID) {\n    updateNote(_id: $_id, content: $content) {\n      _id\n      content\n    }\n  }\n`;\n\nfunction updateNoteMutation(_id, content) {\n  const variables = {\n    _id,\n    content\n  };\n\n  commitMutation(environment, {\n    mutation,\n    variables,\n    onCompleted: (response, errors) => {\n      console.log('Response received from server.');\n    },\n    updater: store => {\n      const newUpdatedNote = store.getRootField('updateNote');\n      const root = store.getRoot();\n      const notes = root.getLinkedRecords('notes');\n      const newNotes = notes.filter(v => v.getValue('_id') !== _id);\n\n      root.setLinkedRecords([...newNotes, newUpdatedNote], 'notes');\n    },\n    onError: err => console.error(err)\n  });\n}\n\nexport default updateNoteMutation;","import { Environment, Network, RecordSource, Store } from 'relay-runtime';\n\nfunction fetchQuery(operation, variables) {\n  return fetch('http://localhost:4000/graphql', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      query: operation.text,\n      variables\n    })\n  }).then(response => {\n    return response.json();\n  });\n}\n\nconst environment = new Environment({\n  network: Network.create(fetchQuery),\n  store: new Store(new RecordSource())\n});\n\nexport default environment;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App/App';\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"names":[],"sourceRoot":""}